#include <bits/stdc++.h>
using namespace std;
const int MaxLen=1<<15;  
char buffer[MaxLen],*S,*T;  
inline char Get_Char()  
{  
    if(S==T)  
    {  
        T=(S=buffer)+fread(buffer,1,MaxLen,stdin);  
        if(S==T) return EOF;  
    }  
    return *S++;  
}
inline int Get_Int()
{  
    char c;  
    int re=0;  
    for(c=Get_Char();c<'0'||c>'9';c=Get_Char());  
    while(c>='0'&&c<='9')  
        re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();  
    return re;  
}
//------------------上面为读入外挂------------------//
int M;//线段树大小
int mx[200005],Mx[200005];
void build(int n)
{
	for(M=1;M<=n+1;M<<=1);
	for(int i=1;i<=n;++i) 
	{
		mx[i+M]=Get_Int();
		Mx[i+M]=mx[i+M];
	}
	for(int i=M-1;i>=1;--i)
	{
		mx[i]=min(mx[i<<1],mx[i<<1|1]);
		Mx[i]=max(Mx[i<<1],Mx[i<<1|1]);
	}
}
void query(int l,int r,int &a,int &b)
{
	a=mx[l+M];
	b=mx[l+M];
    l=l+M-1;
   	r=r+M+1;
   	while(l^r^1)
   	{
   		if(~l&1)
   		{
   			b=min(b,mx[l^1]);
   			a=max(a,Mx[l^1]);
   		}
   		if(r&1)
   		{
   			b=min(b,mx[r^1]);
   			a=max(a,Mx[r^1]);
   		}
   		l>>=1;
   		r>>=1;
   	}
}

int main()
{
    int n,q;
    n=Get_Int();
    q=Get_Int();
    build(n);
	int l,r,a,b;
    while(q--)
    {
        l=Get_Int();
        r=Get_Int();
        query(l,r,a,b);
        printf("%d\n",a-b);
    }
    return 0;
}
